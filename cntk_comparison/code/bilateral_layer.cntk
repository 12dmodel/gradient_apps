# ConvNet on MNIST dataset. 

command = trainNetwork:testNetwork

precision = "float"; traceLevel = 1 ; deviceId = "auto"

rootDir = "../" ; dataDir = "$rootDir$/data" ;
outputDir = "$rootDir$/output" ;
WorkDir = "/output"

modelPath = "$outputDir$/models/mnist"
#stderr = "$outputDir$/ConvNet_MNIST_bs_out"
#
profilerEnabled="true"
profilerSyncGpu="true"

# TRAINING CONFIG
trainNetwork = {
    action = "train"

    BrainScriptNetworkBuilder = {
        imSize = 128
        imageShape = imSize:imSize:1                        # image dimensions, 1 channel only
        labelShape = imSize:imSize:1                               # number of distinct labels

        sigma_s = 8
        sigma_r = 8
        
        norm = 1.0 / (sigma_s*sigma_s)

        featScale = 1/256
        beta = ParameterTensor {1, initValue=1}

        features = Input {imageShape}
        labels = Input {labelShape}

        Scale = x, f => Constant(f) .* x

        # scaled = scale{beta}(features)
        # scaled = beta*features
        scaled = scale{featScale}(features)
        
        # model = Sequential (
        #     Scale {featScale} :
        #     ConvolutionalLayer {1, (1:1), pad = true} : ReLU
        #     # LinearLayer        {labelShape}
        # )

        # inputs

        # apply model to features
        # ol = model (features)
        ol = scaled

        # loss and error computation
        err = SquareError (labels, ol)

        # declare special nodes
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (err)
        evaluationNodes = (err)
        outputNodes     = (ol)
    }

    SGD = {
        epochSize = 1
        minibatchSize = 1
        maxEpochs = 10
        learningRatesPerSample = 0.001*10:0.0005*10:0.0001
        dropoutRate = 0.5
        momentumAsTimeConstant = 0*5:1024
        numMBsToShowResult = 500
    }

    reader = {
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/mnist.txt"
        randomize = false
        keepDataInMemory = true
        input = {
            features = { dim = 16384; format = "dense" }
            labels =   { dim = 16384; format = "dense" }
        }
    }    
}

# TEST CONFIG
testNetwork = {
    action = test
    minibatchSize = 1    # reduce this if you run out of memory

    reader = {
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/mnist.txt"
        input = {
            features = { dim = 16384; format = "dense" }
            labels =   { dim = 16384; format = "dense" }
        }
    }
}
